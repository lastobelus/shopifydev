#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'shopifydev'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/foxhole now"
  exit 64
end

include GLI::App

program_desc "Upload shopify files from the command-line like a boss."

version Shopifydev::VERSION

desc 'verbose'
switch [:v, :verbose]

desc 'Download the theme from an existing shopify site'
arg_name '' # Download take no particular args
command :download do |c|

  c.action do |global_options,options,args|

    Shopifydev::CommandRunner.new.download(options)

    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "download command ran"
  end
end

desc 'Upload a particular file to shopify'
arg_name 'remote key' # upload requires the remote key be specified here
command :upload do |c|

  c.desc 'Upload all files from a given root'
  c.default_value 'none'
  c.arg_name 'patch_root'
  c.flag [:p, :patchify]

  c.desc 'Upload all files matching a glob'
  c.default_value 'none'
  c.arg_name 'glob'
  c.flag [:g, :globify]

  c.action do |global_options,options,args|

    # patchify and glob are mutex locked
    if options[:patchify] != 'none' && options[:globify] != 'none' then
      raise "patchify and globify are mutually exclusive!"
    end

    mode = (options[:patchify] != 'none') ? 'patchify' : ''

    runner = Shopifydev::CommandRunner.new

    case mode
      when 'patchify'
        # we need one patch dir and no args
        raise "patchify takes no args" if args.length > 0

        runner.patchify(options[:p])
      else
        Shopifydev::CommandRunner.new.upload(args, options)
    end

    puts "upload command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
